import {
  registerDecorator,
  ValidationArguments,
  ValidationOptions,
  ValidatorConstraint,
  ValidatorConstraintInterface,
} from 'class-validator';

@ValidatorConstraint({ async: false })
class AtLeastOneFieldConstraint implements ValidatorConstraintInterface {
  validate(value: any, args: ValidationArguments) {
    const object = args.object as any;
    return !!(object[args.constraints[0]] || object[args.constraints[1]] || object[args.constraints[2]]);
  }

  defaultMessage(args: ValidationArguments) {
    return `At least one of ${args.constraints.join(', ')} should be provided`;
  }
}

export function AtLeastOneField(fields: string[], validationOptions?: ValidationOptions) {
  return function (object: Object, propertyName: string) {
    registerDecorator({
      target: object.constructor,
      propertyName: propertyName,
      options: validationOptions,
      constraints: fields,
      validator: AtLeastOneFieldConstraint,
    });
  };
}
